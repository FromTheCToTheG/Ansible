---
- name: TrueNAS SCALE Backup + Update mit NFS-Upload
  hosts: localhost
  gather_facts: false
  become: true  # erforderlich für das Mounten der NFS-Freigabe

  vars:
    truenas_host: "https://192.168.178.230"
    truenas_api_token: "5-VW2fLpM7Qavdjt4SrS6PCrDkXo0o329BaFcUdKkW6YK0LdqBg6sW63vcC0MaF00V"
    backup_filename: "truenas_config_{{ lookup('pipe','date +%F') }}.db"
    nfs_server: "192.168.178.233"
    nfs_share: "/TrueNAS_Backups"
    nfs_mountpoint: "/mnt/nfs_backup"

  tasks:

    - name: Erstelle lokales Backup-Verzeichnis falls nicht vorhanden
      file:
        path: "./truenas_backups"
        state: directory
        mode: '0755'

    - name: Lade TrueNAS-Konfigurationsbackup über API herunter
      uri:
        url: "{{ truenas_host }}/api/v2.0/system/config/save"
        method: POST
        headers:
          Authorization: "Bearer {{ truenas_api_token }}"
        return_content: yes
        status_code: 200
        validate_certs: no
      register: config_backup

    - name: Speichere Backup lokal auf Ansible-Host
      copy:
        content: "{{ config_backup.content }}"
        dest: "./truenas_backups/{{ backup_filename }}"
        mode: '0600'

    - name: Erstelle lokalen Mountpunkt für NFS
      file:
        path: "{{ nfs_mountpoint }}"
        state: directory
        mode: '0755'

    - name: Mount NFS-Freigabe
      mount:
        path: "{{ nfs_mountpoint }}"
        src: "{{ nfs_server }}:{{ nfs_share }}"
        fstype: nfs
        opts: defaults
        state: mounted

    - name: Kopiere Backup auf NFS-Freigabe
      copy:
        src: "./truenas_backups/{{ backup_filename }}"
        dest: "{{ nfs_mountpoint }}/{{ backup_filename }}"
        mode: '0600'

    - name: Unmount NFS-Freigabe
      mount:
        path: "{{ nfs_mountpoint }}"
        state: unmounted

    - name: Entferne lokalen Mountpunkt
      file:
        path: "{{ nfs_mountpoint }}"
        state: absent

    - name: Prüfe, ob Updates verfügbar sind
      uri:
        url: "{{ truenas_host }}/api/v2.0/update/check_available"
        method: POST
        headers:
          Authorization: "Bearer {{ truenas_api_token }}"
        body_format: json
        return_content: yes
        validate_certs: no
      register: update_check

    - name: Zeige Update-Status an
      debug:
        msg: "Update-Status: {{ update_check.json.status }}"

    - name: Führe Update durch, wenn verfügbar
      when: update_check.json.status == "AVAILABLE"
      uri:
        url: "{{ truenas_host }}/api/v2.0/update/update"
        method: POST
        headers:
          Authorization: "Bearer {{ truenas_api_token }}"
        body_format: json
        validate_certs: no
        status_code: 200,202
      register: update_result

    - name: Starte TrueNAS neu, wenn Update erfolgt ist
      when: update_check.json.status == "AVAILABLE"
      uri:
        url: "{{ truenas_host }}/api/v2.0/system/reboot"
        method: POST
        headers:
          Authorization: "Bearer {{ truenas_api_token }}"
        validate_certs: no
        status_code: 200,202

    - name: Warte, bis TrueNAS nach Neustart wieder erreichbar ist
      when: update_check.json.status == "AVAILABLE"
      wait_for:
        host: "{{ truenas_host | urlsplit('hostname') }}"
        port: 443
        delay: 20
        timeout: 300
